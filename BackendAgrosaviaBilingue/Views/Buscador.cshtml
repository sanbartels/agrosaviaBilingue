@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using Umbraco.Examine;
@using BackendAgrosaviaBilingue.Extensions;
@{
    Layout = "Master.cshtml";
    var sectionBuscador = (Buscador)Model;
    string textSearch = Request.QueryString["q"] != null ? Request.QueryString["q"].Trim() : String.Empty;
    string domain = Request.Url.GetLeftPart(UriPartial.Authority);

    string imagen_config_respaldo = "";
}

<div class="container-fluid page-header py-5"
     style="background: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url(@sectionBuscador.ImagenDeFondoHeader.Url()); background-position: center center; background-repeat: no-repeat; background-size: cover;">
    <h1 class="text-center text-white display-6">@Umbraco.GetDictionaryValue("resultados")</h1>
</div>

<div class="container-fluid py-5 mt-5">
    <div class="container py-5">
        <div class="row g-4 mb-5">
            <div class="col-lg-12">
                <div class="row g-4 buscador-inner">
                    @if (!textSearch.IsNullOrWhiteSpace() && ExamineManager.Instance.TryGetIndex("ExternalIndex", out var index))
                    {
                        string[] terms = !string.IsNullOrEmpty(textSearch) && textSearch.Contains(" ") ? textSearch.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries) : !string.IsNullOrWhiteSpace(textSearch) ? new string[] { textSearch } : null;

                        if (terms != null && terms.Any())
                        {
                            terms = terms.Where(x => !Lucene.Net.Analysis.StopAnalyzer.ENGLISH_STOP_WORDS_SET.Contains(x.ToLower()) && x.Length > 2).ToArray(); //no distinguimos entre mayus y mins

                            //var camposImportantes = new List<string> { "titulo", "nodeName", "nombreProducto", "categoria", "tituloSeccionEnInicio", "tituloSeccionInterna", "tituloInternoSeccion", "subtituloDescripcion", "nombreEnMenu", "nombreDeLaSeccion" };

                            //var camposBusquedaDifusa = new List<string> { "resumenProducto", "descripcionProducto", "contenidoInterno", "descripcionSeccion" };


                            //List<ISearchResult> resultadosBusqueda = new List<ISearchResult>();
                            //var searcherAgrosavia = index.GetSearcher();
                            //var criteria = searcherAgrosavia.CreateQuery(IndexTypes.Content);

                            var camposImportantesEs = new List<string> { "titulo", "nodeName", "nombreProducto", "categoria", "tituloSeccionEnInicio", "tituloSeccionInterna", "tituloInternoSeccion", "subtituloDescripcion", "nombreEnMenu", "nombreDeLaSeccion" };
                            var camposImportantesEn = camposImportantesEs.Select(campo => campo + "_en-us").ToList();

                            var camposBusquedaDifusaEs = new List<string> { "resumenProducto", "descripcionProducto", "contenidoInterno", "descripcionSeccion" };
                            var camposBusquedaDifusaEn = camposBusquedaDifusaEs.Select(campo => campo + "_en-us").ToList();

                            var camposImportantes = camposImportantesEs.Concat(camposImportantesEn).ToList();
                            var camposBusquedaDifusa = camposBusquedaDifusaEs.Concat(camposBusquedaDifusaEn).ToList();

                            List<ISearchResult> resultadosBusqueda = new List<ISearchResult>();
                            var searcherAgrosavia = index.GetSearcher();
                            var criteria = searcherAgrosavia.CreateQuery(IndexTypes.Content);

                            var examineQuery = criteria.GroupedNot(new string[] { "umbracoNaviHide" }, new string[] { "1" }).And(q => q
                                                                                            .GroupedOr(new[] { "nodeName", "titulo" }, terms.Boost(2f))//Damos prioridad si encontramos en estas propiedades
                                                                                            .Or()
                                                                                            .GroupedOr(camposImportantes, terms.Boost(1f))
                                                                                            .Or()
                                                                                            .GroupedOr(camposImportantes, terms.Fuzzy(0.8f))  //Difusa por los campos importantes
                                                                                            .Or()
                                                                                            .GroupedOr(camposBusquedaDifusa, terms.Fuzzy(0.8f)), Examine.Search.BooleanOperation.Or);  //Buscamos con terminos parecidos y le damos ajsute de ortografia


                            resultadosBusqueda = examineQuery.Execute().OrderByDescending(x => x.Score).ToList();//.TakeWhile(x => x.Score > 0.04f)

                            if (resultadosBusqueda.Count > 0)
                            {
                                <div class="buscador-inner">
                                    <div class="row centered">
                                        <div class="col-md-8">
                                            <p>@Umbraco.GetDictionaryValue("resultados_para") <span id="text" data-query="@textSearch">@textSearch</span></p>
                                        </div>
                                        <div class="col-md-4">
                                            <p>@Umbraco.GetDictionaryValue("total_resultados") <span>@resultadosBusqueda.Count.ToString()</span></p>
                                        </div>
                                    </div>
                                </div>
                                <ul class="lista">
                                    @renderResults(resultadosBusqueda, domain, imagen_config_respaldo)
                                </ul>
                            }
                            else
                            {
                                @notResults("Ningún resultado de busqueda para", @textSearch)
                            }

                        }
                        else
                        {
                            @notResults("El texto buscado es demasiado corto", "")
                        }
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@helper renderResults(List<ISearchResult> content, string domain, string imagen_config_respaldo)
{
    foreach (SearchResult resultado in content)
    {
        IPublishedContent node = (IPublishedContent)Umbraco.Content(resultado.Id);

        if (node != null)
        {
            string url = buscarUrlNodo(node);

            if (!url.IsNullOrWhiteSpace())
            {
                <li>
                    <a class="busqueda" href="@url" data-tpo="@buscarTipoDocumento(node)">
                        <div class="busqueda-content">
                            <span>
                                @Html.StripHtml(tituloNodo(node).Truncate(120))
                            </span>
                            <span>@url.Truncate(120)</span>
                        </div>
                    </a>
                </li>
            }
        }
    }
}

@helper notResults(string text, string palabra)
{
    @*<div class="resultados_no_encontrados">
        <h4 class="title_no_encontrados">
            @text
            <strong>@palabra</strong>
        </h4>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-player/1.5.7/lottie-player.js"></script>
        <lottie-player src="https://lottie.host/f4cc90b3-83ac-4f3e-83d8-f3913dfca6a7/oaiF2izYwI.json"
                       background="transparent"
                       speed="1"
                       style="width: 300px; height: 300px"
                       mode="bounce"
                       loop
                       autoplay></lottie-player>
    </div>*@

    <div id="send-message" class="centered">
        <div class="row">

            <div class="col-12 no-resultados">
                <h2>No hay resultados @text</h2>                
                <strong>@palabra</strong>
                <div class="no-results">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 758 758">
                        <defs>
                            <style>
                                .cls-1 {
                                    fill: #dedede;
                                }

                                .cls-2 {
                                    fill: #c4c4c4;
                                }

                                .cls-3 {
                                    fill: #2ba5f7;
                                }

                                .cls-4 {
                                    fill: #2197d8;
                                }

                                .cls-5 {
                                    fill: #ffffff;
                                }

                                .cls-6 {
                                    fill: #0c68f1;
                                }

                                .cls-7 {
                                    fill: #d8d8e4;
                                }

                                .cls-8 {
                                    fill: #c2c2c2;
                                }
                            </style>
                        </defs>
                        <title>No Search Results</title>
                        <g id="face">
                            <g id="Face-2" data-name="Face">
                                <circle id="face-fill" class="cls-1" cx="256" cy="256" r="246.85" />
                                <path id="face-shadow" class="cls-2"
                                      d="M126.31,385.69c-88.81-88.8-95.8-228.42-21-325.24a248.47,248.47,0,0,0-23.86,21c-96.4,96.4-96.4,252.7,0,349.1s252.7,96.4,349.1,0a248.47,248.47,0,0,0,21-23.86C354.73,481.49,215.11,474.49,126.31,385.69Z" />
                                <path id="mouth-shadow" class="cls-2"
                                      d="M231.9,360.39a9.15,9.15,0,0,1-4-17.39c18.37-8.84,37.79-8.84,56.15,0a9.15,9.15,0,0,1-7.93,16.49,45.05,45.05,0,0,0-40.29,0A9.11,9.11,0,0,1,231.9,360.39Z" />
                                <g id="tear-fill">
                                    <path class="cls-3"
                                          d="M77.51,414h0a58.23,58.23,0,0,1,0-82.35l41.18-41.18,41.18,41.18a58.23,58.23,0,0,1,0,82.35h0A58.22,58.22,0,0,1,77.51,414Z" />
                                    <path class="cls-4"
                                          d="M106.79,414h0a58.21,58.21,0,0,1,0-82.35l26.54-26.54-14.64-14.64L77.51,331.61a58.24,58.24,0,0,0,0,82.36h0a58.18,58.18,0,0,0,55.82,15.18A57.79,57.79,0,0,1,106.79,414Z" />
                                </g>
                                <path id="face-outline"
                                      d="M256,0C114.84,0,0,114.84,0,256S114.84,512,256,512,512,397.16,512,256,397.16,0,256,0ZM84,338.08l34.71-34.7,34.71,34.7a49.09,49.09,0,1,1-69.42,0ZM256,493.7a236.6,236.6,0,0,1-152.13-55.21,67.36,67.36,0,0,0,62.47-113.35L125.16,284a9.15,9.15,0,0,0-12.94,0L71,325.15A67.21,67.21,0,0,0,51.48,377,236.27,236.27,0,0,1,18.3,256C18.3,124.93,124.93,18.3,256,18.3S493.7,124.93,493.7,256,387.07,493.7,256,493.7Z" />
                            </g>
                            <path id="brow-left"
                                  d="M174.86,149.55a87.29,87.29,0,0,0-73.44,46.38,9.15,9.15,0,1,0,16.13,8.64,69.13,69.13,0,0,1,58.17-36.74,9.15,9.15,0,0,0-.86-18.28Z" />
                            <path id="brow-right"
                                  d="M337.14,149.55a9.15,9.15,0,0,0-.86,18.28,69.13,69.13,0,0,1,58.17,36.74,9.15,9.15,0,1,0,16.13-8.64A87.29,87.29,0,0,0,337.14,149.55Z" />
                            <path id="mouth"
                                  d="M314.46,318.62c-32.78-19.77-84.14-19.77-116.92,0A9.15,9.15,0,1,0,207,334.29c26.56-16,71.45-16,98,0a9.15,9.15,0,1,0,9.45-15.67Z" />
                            <g id="eye-left">
                                <path d="M146.72,203.59a33.85,33.85,0,1,0,33.86,33.85A33.89,33.89,0,0,0,146.72,203.59Z" />
                                <circle class="cls-5 pupil" cx="158.81" cy="230.1" r="9.15" />
                            </g>
                            <g id="eye-right">
                                <path d="M365.28,203.59a33.85,33.85,0,1,0,33.85,33.85A33.9,33.9,0,0,0,365.28,203.59Z" />
                                <circle class="cls-5 pupil" cx="377.18" cy="230.1" r="9.15" />
                            </g>
                        </g>
                        <g class="magnifying-glass">
                            <g id="mag">
                                <path class="cls-6 handle"
                                      d="M374.71,551.45l-140.9,140.9a20,20,0,0,0,0,28.23l21.61,21.61a20,20,0,0,0,28.23,0l140.9-140.9Z" />
                                <path id="handle-top" class="cls-7"
                                      d="M374.71,551.45l49.84,49.84-35.93,35.93-49.84-49.84Z" />
                                <path id="mag-outer-fill" class="cls-8"
                                      d="M531.37,257C635,257,719,341,719,444.62S635,632.26,531.37,632.26s-187.63-84-187.63-187.64S427.74,257,531.37,257Z" />
                                <path id="mag-center-white" class="cls-5"
                                      d="M531.37,312.87A131.75,131.75,0,1,1,399.63,444.62,131.75,131.75,0,0,1,531.37,312.87Z" />
                                <g id="mag-outline">
                                    <path d="M617.48,530.71a10,10,0,1,0,14.1,14.13l.76-.77a10,10,0,0,0-14.21-14Z" />
                                    <path d="M431.16,544.83A142.11,142.11,0,0,0,591.1,573.18a10,10,0,1,0-8.41-18.1,121.76,121.76,0,1,1,57.23-55.21,10,10,0,1,0,17.79,9.05,141.37,141.37,0,0,0-26.12-164.51c-55.26-55.26-145.17-55.26-200.43,0S375.9,489.57,431.16,544.83Z" />
                                    <path d="M226.75,727.64l21.61,21.61a30,30,0,0,0,42.35,0L427.37,612.58a196.39,196.39,0,0,0,104,29.66c109,0,197.62-88.65,197.62-197.62S640.34,247,531.37,247,333.76,335.65,333.76,444.62a196.4,196.4,0,0,0,29.66,104L226.75,685.29A30,30,0,0,0,226.75,727.64ZM531.37,622.28c-98,0-177.65-79.7-177.65-177.66S433.41,267,531.37,267,709,346.66,709,444.62,629.33,622.28,531.37,622.28ZM410.71,601,388.62,623.1,352.9,587.38,375,565.29A199.31,199.31,0,0,0,410.71,601Zm-169.84,98.4,97.91-97.92,35.72,35.73-97.91,97.91a10,10,0,0,1-14.11,0l-21.61-21.61A10,10,0,0,1,240.87,699.41Z" />
                                    <path d="M501.09,381.64a10,10,0,1,0-8.66-18,90.39,90.39,0,0,0-50.89,81,10,10,0,0,0,20,0A70.29,70.29,0,0,1,501.09,381.64Z" />
                                    <path d="M531.37,374.76a10,10,0,1,0,0-20h-.15a10,10,0,0,0,0,20Z" />
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
            </div>
        </div>
    </div>
}

@functions{

    public string tituloNodo(IPublishedContent node)
    {
        string retorno = "";

        if (node.HasValue("nombreEnMenu"))
        {
            retorno = node.GetProperty("nombreEnMenu").Value().ToString();
        }
        else
        {
            if (node.HasValue("nombreSeccion"))
            {
                retorno = node.GetProperty("nombreSeccion").Value().ToString();
            }
            else
            {
                if (node.HasValue("nombreProducto"))
                {
                    retorno = node.GetProperty("nombreProducto").Value().ToString();
                }
                else
                {
                    if (node.HasValue("nombreCargo"))
                    {
                        retorno = node.GetProperty("nombreCargo").Value().ToString();
                    }
                    else
                    {
                        if (node.HasValue("nombreCategoria"))
                        {
                            retorno = node.GetProperty("nombreCategoria").Value().ToString();
                        }
                        else
                        {
                            if (node.HasValue("nombreColeccion"))
                            {
                                retorno = node.GetProperty("nombreColeccion").Value().ToString();
                            }
                            else
                            {
                                if (node.HasValue("nombreRecurso"))
                                {
                                    retorno = node.GetProperty("nombreRecurso").Value().ToString();
                                }
                                else
                                {
                                    if (node.HasValue("nombreDeLaSeccion"))
                                    {
                                        retorno = node.GetProperty("nombreDeLaSeccion").Value().ToString();
                                    }
                                    else
                                    {
                                        if (node.HasValue("nombreItem"))
                                        {
                                            retorno = node.GetProperty("nombreItem").Value().ToString();
                                        }
                                        else
                                        {
                                            if (node.HasValue("nombreDeLaRed"))
                                            {
                                                retorno = node.GetProperty("nombreDeLaRed").Value().ToString();
                                            }
                                            else
                                            {
                                                if (node.ContentType.Alias == "linkExternoEnMenu")
                                                {
                                                    if (node.HasValue("tituloLink"))
                                                    {
                                                        retorno = node.GetProperty("tituloLink").Value().ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    if (node.ContentType.Alias == "contrato")
                                                    {
                                                        if (node.HasValue("contenido"))
                                                        {
                                                            retorno = node.GetProperty("contenido").Value().ToString().StripHtml();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (node.ContentType.Alias == "nosotros")
                                                        {
                                                            if (node.HasValue("nombreEnMenu"))
                                                            {
                                                                retorno = node.GetProperty("nombreEnMenu").Value().ToString();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return retorno;
    }

    public string buscarTipoDocumento(IPublishedContent node)
    {
        string retorno = "General";
        var content = Services.ContentService.GetById(node.Id);


        if (content != null)
        {
            retorno = content.ContentType.Name;
        }

        return retorno;
    }

    public string buscarUrlNodo(IPublishedContent node, string retorno = "")
    {
        retorno = node.Url(mode: UrlMode.Absolute);

        return retorno;
    }

    public int contarResultadosConUrl(IEnumerable<SearchResult> content)
    {
        int numResultados = 0;

        foreach (SearchResult resultado in content)
        {
            IPublishedContent node = (IPublishedContent)Umbraco.Content(resultado.Id);


            numResultados++;

        }

        return numResultados;
    }
}


@section js{
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function () {
            $(document).on("click", "#btnBuscarFiltro", function (e) {
                e.preventDefault();
                var query = $("#text").data("query");

                if (query != "") {
                    document.location.href = "/Buscar?q=" + query;
                } else {
                    $("#textSearch").css("border-style", "solid");
                    $("#textSearch").css("border-color", "rgb(218, 16, 16)");
                    $("#textSearch").css("border-width", "0px 0px 1px");
                    $("#textSearch").focus();
                }
            });
        });
    </script>
}